//----------------------------------------------------------------------------------------------------------------------
/*!
   \file
   \brief       Class to handle caching of hash values

   Class to handle caching of hash values

   \copyright   Copyright 2025 Sensor-Technik Wiedemann GmbH. All rights reserved.
*/
//----------------------------------------------------------------------------------------------------------------------

/* -- Includes ------------------------------------------------------------------------------------------------------ */
#include "precomp_headers.hpp"

#include "C_PuiSvHashCacheHandling.hpp"

/* -- Used Namespaces ----------------------------------------------------------------------------------------------- */
using namespace stw::opensyde_gui_logic;

/* -- Module Global Constants --------------------------------------------------------------------------------------- */

/* -- Types --------------------------------------------------------------------------------------------------------- */

/* -- Global Variables ---------------------------------------------------------------------------------------------- */

/* -- Module Global Variables --------------------------------------------------------------------------------------- */

/* -- Module Global Function Prototypes ----------------------------------------------------------------------------- */

/* -- Implementation ------------------------------------------------------------------------------------------------ */

//----------------------------------------------------------------------------------------------------------------------
/*! \brief  Default constructor
*/
//----------------------------------------------------------------------------------------------------------------------
C_PuiSvHashCacheHandling::C_PuiSvHashCacheHandling() :
   mq_AllowCash(false),
   mq_HashIsUpToDate(false),
   mu32_Hash(0UL)
{
}

//----------------------------------------------------------------------------------------------------------------------
/*! \brief  Set allow cash

   \param[in]  oq_Value    Value
*/
//----------------------------------------------------------------------------------------------------------------------
void C_PuiSvHashCacheHandling::SetAllowCash(const bool oq_Value)
{
   this->mq_AllowCash = oq_Value;
   this->mq_HashIsUpToDate = false;
}

//----------------------------------------------------------------------------------------------------------------------
/*! \brief  Set hash

   \param[in]  ou32_Value  Value
*/
//----------------------------------------------------------------------------------------------------------------------
void C_PuiSvHashCacheHandling::SetHash(const uint32_t ou32_Value)
{
   this->mq_HashIsUpToDate = true;
   this->mu32_Hash = ou32_Value;
}

//----------------------------------------------------------------------------------------------------------------------
/*! \brief  Get hash available

   \return
   Flags

   \retval   True    Hash available
   \retval   False   Hash not available
*/
//----------------------------------------------------------------------------------------------------------------------
bool C_PuiSvHashCacheHandling::GetHashAvailable(void) const
{
   return this->mq_AllowCash && this->mq_HashIsUpToDate;
}

//----------------------------------------------------------------------------------------------------------------------
/*! \brief  Get hash

   \return
   Hash
*/
//----------------------------------------------------------------------------------------------------------------------
uint32_t C_PuiSvHashCacheHandling::GetHash(void) const
{
   return this->mu32_Hash;
}
